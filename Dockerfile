
# Stage 1: Builder
FROM node:20-alpine AS builder

WORKDIR /app

# Copy package files and install all dependencies (including devDependencies for build)
COPY package*.json ./
RUN npm install

# Copy the rest of the application code
COPY . .

# Build the Next.js application
RUN npm run build

# Stage 2: Runner - For production
FROM node:20-alpine AS runner

WORKDIR /app

# Set NODE_ENV to production
ENV NODE_ENV production

# Create a non-root user for security
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy package.json and package-lock.json to install production dependencies
COPY package*.json ./

# Install only production dependencies.
# Ensure `concurrently`, `genkit-cli`, `tsx` are in "dependencies" in package.json
RUN npm ci --omit=dev --ignore-scripts

# Copy the Next.js standalone output from the builder stage
# This includes a minimal server.js and necessary node_modules for Next.js itself
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./standalone-server
# Copy static assets generated by Next.js
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./standalone-server/.next/static

# Copy Genkit source files and other necessary runtime files for Genkit.
# Adjust these paths if your Genkit files are located elsewhere.
COPY --chown=nextjs:nodejs src/ai ./src/ai
COPY --chown=nextjs:nodejs genkit.config.json ./genkit.config.json 2>/dev/null || true 
COPY --chown=nextjs:nodejs tsconfig.json ./tsconfig.json


# Switch to the non-root user
USER nextjs

EXPOSE 3000
EXPOSE 3400

# Start the application using the npm start script
# This script uses concurrently to run both Next.js and Genkit
CMD ["npm", "run", "start"]
